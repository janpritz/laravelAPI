
import static java.awt.AlphaComposite.Clear;
import java.awt.Toolkit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.google.gson.JsonObject;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JTextField;
import org.json.JSONObject;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Momshie Langs
 */
public class frmMain extends javax.swing.JFrame {

    /**
     * Creates new form frmMain
     */
    public frmMain() {
        initComponents();
        refresh();
        idText.setVisible(false);
        input_id.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        split = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        idText = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        input_id = new javax.swing.JTextField();
        input_fname = new javax.swing.JTextField();
        input_mname = new javax.swing.JTextField();
        input_lname = new javax.swing.JTextField();
        input_username = new javax.swing.JTextField();
        input_email = new javax.swing.JTextField();
        input_contact = new javax.swing.JTextField();
        submit = new javax.swing.JButton();
        input_role = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        input_password = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        edit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ACADEMIC RESEARCH ARCHIVES");

        refresh.setBackground(new java.awt.Color(255, 255, 153));
        refresh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0), 5), "Entry Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        idText.setText("ID");

        jLabel3.setText("First Name");

        jLabel4.setText("Middle Name");

        jLabel5.setText("Last Name");

        jLabel6.setText("Username");

        jLabel7.setText("Email");

        jLabel8.setText("Contact No.");

        input_id.setEditable(false);
        input_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_idActionPerformed(evt);
            }
        });

        input_mname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_mnameActionPerformed(evt);
            }
        });

        input_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_usernameActionPerformed(evt);
            }
        });

        input_email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_emailActionPerformed(evt);
            }
        });

        input_contact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_contactActionPerformed(evt);
            }
        });

        submit.setBackground(new java.awt.Color(102, 255, 102));
        submit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        submit.setText("Add");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        input_role.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_roleActionPerformed(evt);
            }
        });

        jLabel11.setText("Role");

        clear.setBackground(new java.awt.Color(204, 204, 204));
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        input_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_passwordActionPerformed(evt);
            }
        });

        jLabel12.setText("Password");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(clear)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(input_role, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(input_contact, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(input_username))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(idText))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(input_id)
                                .addComponent(input_fname, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(18, 18, 18)
                            .addComponent(input_email))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(input_lname))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addComponent(input_mname, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {idText, jLabel11, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {input_contact, input_email, input_fname, input_id, input_lname, input_mname, input_role, input_username});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idText)
                    .addComponent(input_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(input_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(input_mname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(input_lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(input_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(input_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(input_contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(input_role, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submit)
                    .addComponent(clear))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {idText, jLabel11, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {input_contact, input_email, input_fname, input_id, input_lname, input_mname, input_role, input_username});

        split.setLeftComponent(jPanel3);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Middle Name", "Last Name", "Username", "Email", "Contact No.", "Role"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(30);
            table.getColumnModel().getColumn(0).setPreferredWidth(30);
            table.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText("Users Records");

        delete.setBackground(new java.awt.Color(255, 0, 51));
        delete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        edit.setBackground(new java.awt.Color(0, 153, 255));
        edit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(247, 247, 247))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(edit))
                .addContainerGap())
        );

        split.setRightComponent(jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(split, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(split, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refresh)
                        .addGap(19, 19, 19))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed

    }//GEN-LAST:event_refreshActionPerformed

    private void input_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_usernameActionPerformed

    private void input_emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_emailActionPerformed

    private void input_contactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_contactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_contactActionPerformed

    private void input_mnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_mnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_mnameActionPerformed

    private void input_roleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_roleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_roleActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tableMouseClicked

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_clearActionPerformed

    public void clear() {
        input_id.setText("");
        input_fname.setText("");
        input_mname.setText("");
        input_lname.setText("");
        input_username.setText("");
        input_email.setText("");
        input_contact.setText("");
        input_role.setText("");
        input_password.setText("");
        submit.setText("Add");
    }

    private boolean validateFormEdit() {
        String firstname = input_fname.getText();
        String middlename = input_mname.getText();
        String lastname = input_lname.getText();
        String username = input_username.getText();
        String email = input_email.getText();
        String contact = input_contact.getText();
        String role = input_role.getText();
        String password = input_password.getText();

        if (firstname.isEmpty()) {
            showError("First Name is required");
            return false;
        }

        if (middlename.isEmpty()) {
            showError("Middle Name is required");
            return false;
        }

        if (lastname.isEmpty()) {
            showError("Last Name is required");
            return false;
        }

        if (username.isEmpty()) {
            showError("Username is required");
            return false;
        }

        if (email.isEmpty()) {
            showError("Email is required");
            return false;
        }

        if (contact.isEmpty()) {
            showError("Contact is required");
            return false;
        }

        if (role.isEmpty()) {
            showError("Role is required");
            return false;
        }

        if (password.isEmpty()) {
            showError("Please input a password");
            return false;
        }
        return true;
    }

    private boolean validateFormAdd() {
        String firstname = input_fname.getText();
        String middlename = input_mname.getText();
        String lastname = input_lname.getText();
        String username = input_username.getText();
        String email = input_email.getText();
        String contact = input_contact.getText();
        String role = input_role.getText();
        String password = input_password.getText();

        if (firstname.isEmpty()) {
            showError("First Name is required");
            return false;
        }

        if (middlename.isEmpty()) {
            showError("Middle Name is required");
            return false;
        }

        if (lastname.isEmpty()) {
            showError("Last Name is required");
            return false;
        }

        if (username.isEmpty()) {
            showError("Username is required");
            return false;
        }

        if (email.isEmpty()) {
            showError("Email is required");
            return false;
        }

        if (contact.isEmpty()) {
            showError("Contact is required");
            return false;
        }

        if (role.isEmpty()) {
            showError("Role is required");
            return false;
        }

        if (password.isEmpty()) {
            showError("Please input a password");
            return false;
        }
        
        if (!isValidEmail(email)) {
            showError("Invalid email format.");
            return false;
        }

        if (!isUniqueEmail(email)) {
            showError("The email address has already been taken.");
            return false;
        }

        if (!isUniqueContact(contact)) {
            showError("This contact has already been registered.");
            return false;
        }

        if (!isUniqueUsername(username)) {
            showError("The username has already been taken.");
            return false;
        }
        return true;
    }

    private boolean isValidEmail(String email) {
        return email.contains("@") && email.contains(".");
    }

    private boolean isUniqueEmail(String email) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String existingEmail = (String) model.getValueAt(i, 5); // Replace emailColumnIndex with the actual index of the email column
            if (email.equalsIgnoreCase(existingEmail)) {
                return false; // Email is not unique
            }
        }
        return true; // Email is unique
    }

    private boolean isUniqueContact(String contact) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        int contactColumnIndex = 6; // Replace with the actual index of the contact column

        for (int i = 0; i < rowCount; i++) {
            String existingContact = (String) model.getValueAt(i, contactColumnIndex);
            if (contact.equals(existingContact)) {
                return false; // Contact is not unique
            }
        }
        return true; // Contact is unique
    }

    private boolean isUniqueUsername(String username) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String existingUsername = (String) model.getValueAt(i, 4); // Replace emailColumnIndex with the actual index of the username column
            if (username.equalsIgnoreCase(existingUsername)) {
                return false; // Username is not unique
            }
        }
        return true; // Email is unique
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this, "Validation failed: " + message, "Error", JOptionPane.ERROR_MESSAGE);
        //statusLabel.setText(message);
        //statusLabel.setForeground(Color.RED);
    }

    private void showSuccess(String message) {
        //statusLabel.setText(message);
        //statusLabel.setForeground(Color.GREEN);
    }

    private void handleUpdate(java.awt.event.ActionEvent evt) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "No row selected. Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String id = (String) model.getValueAt(selectedRow, 0); // Assuming the ID is in the first column

        try {
            JsonObject jsonParam = createJsonParamForUpdate();
            String jsonString = new Gson().toJson(jsonParam);

            URL url = new URL("http://127.0.0.1:8000/api/users/" + id); // Replace with your actual API URL
            HttpURLConnection conn = createConnection(url, "PUT");

            System.out.println("Sending request to URL: " + url);
            System.out.println("Request Method: " + conn.getRequestMethod());
            System.out.println("Request JSON: " + jsonString);

            sendRequest(conn, jsonString);
            handleResponse(conn, "Data successfully updated");

            conn.disconnect();
            clear();
            refresh();
        } catch (Exception e) {
            handleError(e, "updating");
        }
    }

    private void handleInsert(java.awt.event.ActionEvent evt) {
        try {
            JsonObject jsonParam = createJsonParamForInsert();
            String jsonString = new Gson().toJson(jsonParam);

            URL url = new URL("http://127.0.0.1:8000/api/users"); // Replace with your actual API URL
            HttpURLConnection conn = createConnection(url, "POST");

            System.out.println("Sending request to URL: " + url);
            System.out.println("Request JSON: " + jsonString);

            sendRequest(conn, jsonString);
            handleResponse(conn, "Data successfully inserted");

            conn.disconnect();
            clear();
            refresh();
        } catch (Exception e) {
            handleError(e, "inserting");
        }
    }

    private JsonObject createJsonParamForUpdate() {
        JsonObject jsonParam = new JsonObject();
        jsonParam.addProperty("id", input_id.getText());
        jsonParam.addProperty("fname", input_fname.getText());
        jsonParam.addProperty("mname", input_mname.getText());
        jsonParam.addProperty("lname", input_lname.getText());
        jsonParam.addProperty("username", input_username.getText());
        jsonParam.addProperty("email", input_email.getText());
        jsonParam.addProperty("contact", input_contact.getText());
        jsonParam.addProperty("role", input_role.getText());
        jsonParam.addProperty("password", input_password.getText());
        return jsonParam;
    }

    private JsonObject createJsonParamForInsert() {
        JsonObject jsonParam = new JsonObject();
        jsonParam.addProperty("fname", input_fname.getText());
        jsonParam.addProperty("mname", input_mname.getText());
        jsonParam.addProperty("lname", input_lname.getText());
        jsonParam.addProperty("username", input_username.getText());
        jsonParam.addProperty("email", input_email.getText());
        jsonParam.addProperty("contact", input_contact.getText());
        jsonParam.addProperty("role", input_role.getText());
        jsonParam.addProperty("password", input_password.getText());
        return jsonParam;
    }

    private HttpURLConnection createConnection(URL url, String method) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(method);
        conn.setRequestProperty("Content-Type", "application/json");
        return conn;
    }

    private void sendRequest(HttpURLConnection conn, String jsonString) throws IOException {
        try (OutputStream os = conn.getOutputStream()) {
            os.write(jsonString.getBytes(StandardCharsets.UTF_8));
            os.flush();
        }
    }

    private void handleResponse(HttpURLConnection conn, String successMessage) throws IOException {
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_CREATED) {
            InputStream errorStream = conn.getErrorStream();
            if (errorStream != null) {
                String errorMessage = new BufferedReader(new InputStreamReader(errorStream))
                        .lines().collect(Collectors.joining("\n"));
                throw new RuntimeException("Failed : HTTP error code : " + responseCode + " - " + errorMessage);
            } else {
                throw new RuntimeException("Failed : HTTP error code : " + responseCode + " - No error message available");
            }
        }
        JOptionPane.showMessageDialog(this, successMessage, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    private void handleError(Exception e, String action) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error " + action + " user: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        if (submit.getText().equals("Update")) {
            //handleUpdate(evt);
            if (validateFormEdit()) {
                handleUpdate(evt);
            }
        } else {
            //handleInsert(evt);
            if (validateFormAdd()) {
                handleInsert(evt);
            }
        }
    }//GEN-LAST:event_submitActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:

        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "No row selected. Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        idText.setVisible(true);
        input_id.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String userid = (String) model.getValueAt(selectedRow, 0);
        String firstname = (String) model.getValueAt(selectedRow, 1);
        String middlename = (String) model.getValueAt(selectedRow, 2);
        String lastname = (String) model.getValueAt(selectedRow, 3);
        String usernamea = (String) model.getValueAt(selectedRow, 4);
        String emaila = (String) model.getValueAt(selectedRow, 5);
        String contacta = (String) model.getValueAt(selectedRow, 6);
        String rolea = (String) model.getValueAt(selectedRow, 7);

        input_id.setText(userid);
        input_fname.setText(firstname);
        input_mname.setText(middlename);
        input_lname.setText(lastname);
        input_username.setText(usernamea);
        input_email.setText(emaila);
        input_contact.setText(contacta);
        input_role.setText(rolea);
        submit.setText("Update");
    }//GEN-LAST:event_editActionPerformed

    private void input_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_passwordActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "No row selected. Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        String id = (String) model.getValueAt(selectedRow, 0);

        try {

            // Create JSON object with the data
            JsonObject jsonParam = new JsonObject();
            jsonParam.addProperty("id", id);

            Gson gson = new Gson();
            String jsonString = gson.toJson(jsonParam);

            // Create URL connection
            URL url = new URL("http://127.0.0.1:8000/api/users/" + id); // Replace with your actual API URL
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("DELETE");
            conn.setRequestProperty("Content-Type", "application/json");

            // Send the request
            OutputStream os = conn.getOutputStream();
            os.write(jsonString.getBytes(StandardCharsets.UTF_8));
            os.flush();
            os.close();

            // Handle the response
            int responseCode = conn.getResponseCode();
            if (responseCode != HttpURLConnection.HTTP_OK) {
                // Read error message from response
                InputStream errorStream = conn.getErrorStream();
                String errorMessage = new BufferedReader(new InputStreamReader(errorStream))
                        .lines().collect(Collectors.joining("\n"));
                throw new RuntimeException("Failed : HTTP error code : " + responseCode + " - " + errorMessage);
            }

            // Success message
            JOptionPane.showMessageDialog(this, "Data successfully removed", "Success", JOptionPane.INFORMATION_MESSAGE);

            conn.disconnect();
            clear();
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating user: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void input_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_idActionPerformed

    private void refresh() {
        try {
            String jsonResponse = APIClient.fetchUsers();
            List<Users> users = Users.fromJson(jsonResponse);
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0); // Clear existing data

            for (Users user : users) {
                model.addRow(new Object[]{
                    user.getID(),
                    user.getFname(),
                    user.getMname(),
                    user.getLname(),
                    user.getUsername(),
                    user.getEmail(),
                    user.getContact(),
                    user.getRole(),});
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching users: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel idText;
    private javax.swing.JTextField input_contact;
    private javax.swing.JTextField input_email;
    private javax.swing.JTextField input_fname;
    private javax.swing.JTextField input_id;
    private javax.swing.JTextField input_lname;
    private javax.swing.JTextField input_mname;
    private javax.swing.JTextField input_password;
    private javax.swing.JTextField input_role;
    private javax.swing.JTextField input_username;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refresh;
    private javax.swing.JSplitPane split;
    private javax.swing.JButton submit;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

}
